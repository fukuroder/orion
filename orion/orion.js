// Generated by Haxe 4.0.5
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var AudioFileReader = function(decodeFinished,decodeError) {
	this.decodeFinished = decodeFinished;
	this.decodeError = decodeError;
};
AudioFileReader.__name__ = true;
AudioFileReader.prototype = {
	loadFinished: function(loaded_evt) {
		var audio_context = new AudioContext();
		audio_context.decodeAudioData(loaded_evt.target.result,this.decodeFinished,this.decodeError);
	}
	,load: function(audio_file) {
		var reader = new FileReader();
		reader.onload = $bind(this,this.loadFinished);
		reader.readAsArrayBuffer(audio_file);
	}
	,__class__: AudioFileReader
};
var AudioProcessor = function(canvas,abnormal_end) {
	this.gain = 0.5;
	this.pos = 0;
	this.canvas = canvas;
	this.audio_context = new AudioContext();
	this.abnormal_end = abnormal_end;
};
AudioProcessor.__name__ = true;
AudioProcessor.prototype = {
	audio_process: function(e) {
		var output1_arr = e.outputBuffer.getChannelData(0);
		var output2_arr = e.outputBuffer.getChannelData(1);
		var input1_arr = this.decoded_buffer.getChannelData(0);
		var input2_arr = this.decoded_buffer.getChannelData(1);
		var module_sequence = this.canvas._module_seqence;
		var breakdown = false;
		var _g = 0;
		while(_g < 1024) {
			var i = _g++;
			if(this.pos < this.decoded_buffer.length) {
				this.canvas._input_module.value1 = input1_arr[this.pos] * this.gain;
				this.canvas._input_module.value2 = input2_arr[this.pos] * this.gain;
				this.pos++;
				var _g1 = 0;
				while(_g1 < module_sequence.length) {
					var m = module_sequence[_g1];
					++_g1;
					m.evaluate();
					var _g2 = 0;
					var _g11 = m.output_arr;
					while(_g2 < _g11.length) {
						var output = _g11[_g2];
						++_g2;
						var _g3 = 0;
						var _g12 = output.next_input_arr;
						while(_g3 < _g12.length) {
							var next_input = _g12[_g3];
							++_g3;
							next_input.value1 = output.value1;
							next_input.value2 = output.value2;
						}
						var _g21 = 0;
						var _g31 = output.quick_bus_next_input_arr;
						while(_g21 < _g31.length) {
							var next_input1 = _g31[_g21];
							++_g21;
							next_input1.value1 = output.value1;
							next_input1.value2 = output.value2;
						}
					}
				}
				if(breakdown == false && -10 < this.canvas._output_module.value1 && this.canvas._output_module.value1 < 10 && -10 < this.canvas._output_module.value2 && this.canvas._output_module.value2 < 10) {
					output1_arr[i] = this.canvas._output_module.value1;
					output2_arr[i] = this.canvas._output_module.value2;
				} else {
					breakdown = true;
					output1_arr[i] = output2_arr[i] = 0.0;
				}
			} else {
				output1_arr[i] = output2_arr[i] = 0.0;
			}
		}
		if(breakdown) {
			this.stop();
			this.abnormal_end();
		}
	}
	,update_gain: function(gain) {
		this.gain = gain;
	}
	,start: function(decoded_buffer) {
		this.decoded_buffer = decoded_buffer;
		this.pos = 0;
		this.script_processor = this.audio_context.createScriptProcessor(1024,0,2);
		this.script_processor.onaudioprocess = $bind(this,this.audio_process);
		this.script_processor.connect(this.audio_context.destination,0,0);
	}
	,stop: function() {
		this.script_processor.disconnect(0);
		this.script_processor.onaudioprocess = null;
		this.script_processor = null;
	}
	,__class__: AudioProcessor
};
var AudioWriter = function(canvas,decoded_buffer) {
	this.canvas = canvas;
	this.decoded_buffer = decoded_buffer;
};
AudioWriter.__name__ = true;
AudioWriter.prototype = {
	start: function() {
		var output = new Float32Array(2 * this.decoded_buffer.length);
		var input1_arr = this.decoded_buffer.getChannelData(0);
		var input2_arr = this.decoded_buffer.getChannelData(1);
		var module_sequence = this.canvas._module_seqence;
		var maxvalue = 0.0;
		var _g = 0;
		var _g1 = this.decoded_buffer.length;
		while(_g < _g1) {
			var i = _g++;
			this.canvas._input_module.value1 = input1_arr[i];
			this.canvas._input_module.value2 = input2_arr[i];
			var _g2 = 0;
			while(_g2 < module_sequence.length) {
				var m = module_sequence[_g2];
				++_g2;
				m.evaluate();
				var _g3 = 0;
				var _g11 = m.output_arr;
				while(_g3 < _g11.length) {
					var output1 = _g11[_g3];
					++_g3;
					var _g4 = 0;
					var _g12 = output1.next_input_arr;
					while(_g4 < _g12.length) {
						var next_input = _g12[_g4];
						++_g4;
						next_input.value1 = output1.value1;
						next_input.value2 = output1.value2;
					}
					var _g21 = 0;
					var _g31 = output1.quick_bus_next_input_arr;
					while(_g21 < _g31.length) {
						var next_input1 = _g31[_g21];
						++_g21;
						next_input1.value1 = output1.value1;
						next_input1.value2 = output1.value2;
					}
				}
			}
			if(-10 < this.canvas._output_module.value1 && this.canvas._output_module.value1 < 10 && -10 < this.canvas._output_module.value2 && this.canvas._output_module.value2 < 10) {
				output[2 * i] = this.canvas._output_module.value1;
				output[2 * i + 1] = this.canvas._output_module.value2;
				if(maxvalue < Math.abs(this.canvas._output_module.value1)) {
					maxvalue = Math.abs(this.canvas._output_module.value1);
				}
				if(maxvalue < Math.abs(this.canvas._output_module.value2)) {
					maxvalue = Math.abs(this.canvas._output_module.value2);
				}
			} else {
				return null;
			}
		}
		if(maxvalue == 0.0) {
			return null;
		}
		var wavdata = new ArrayBuffer(44 + output.length * 2);
		var view = new DataView(wavdata);
		view.setUint8(0,82);
		view.setUint8(1,73);
		view.setUint8(2,70);
		view.setUint8(3,70);
		view.setUint32(4,32 + this.decoded_buffer.length * 2,true);
		view.setUint8(8,87);
		view.setUint8(9,65);
		view.setUint8(10,86);
		view.setUint8(11,69);
		view.setUint8(12,102);
		view.setUint8(13,109);
		view.setUint8(14,116);
		view.setUint8(15,32);
		view.setUint32(16,16,true);
		view.setUint16(20,1,true);
		view.setUint16(22,2,true);
		view.setUint32(24,Math.round(this.decoded_buffer.sampleRate),true);
		view.setUint32(28,Math.round(this.decoded_buffer.sampleRate) * 4,true);
		view.setUint16(32,4,true);
		view.setUint16(34,16,true);
		view.setUint8(36,100);
		view.setUint8(37,97);
		view.setUint8(38,116);
		view.setUint8(39,97);
		view.setUint32(40,output.length * 2,true);
		var _g22 = 0;
		var _g32 = output.length;
		while(_g22 < _g32) {
			var i1 = _g22++;
			view.setInt16(44 + 2 * i1,Math.round(output[i1] * 32768 / maxvalue),true);
		}
		return wavdata;
	}
	,__class__: AudioWriter
};
var ConnectionEditor = function(canvas) {
	this.tol = 10;
	this._module_seqence = [];
	this._ctrl_module_arr = [];
	this._module_arr = [];
	this._original_module_arr = [];
	this.canvas = canvas;
	this.rendering_context = canvas.getContext("2d",null);
	this.canvas_height = canvas.height;
	this.canvae_width = canvas.width;
};
ConnectionEditor.__name__ = true;
ConnectionEditor.squareDistance = function(x1,y1,x2,y2) {
	return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
};
ConnectionEditor.prototype = {
	start_cable_drag: function(start,end) {
		this.start = start;
		this.end = end;
	}
	,get_cable_point: function() {
		if(this.start != null) {
			return this.start.get_point();
		} else if(this.end != null) {
			return this.end.get_point();
		}
		return null;
	}
	,is_cable_dragging: function() {
		if(this.start == null) {
			return this.end != null;
		} else {
			return true;
		}
	}
	,start_module_drag: function(module,offset_x,offset_y) {
		this.drag_module = module;
		this.drag_module_offset_x = offset_x - module.x;
		this.drag_module_offset_y = offset_y - module.y;
		this.drag_module_prev_x = module.x;
		this.drag_module_prev_y = module.y;
	}
	,end_module_drag: function(offset) {
		this.drag_module.move(offset.x - this.drag_module_offset_x,offset.y - this.drag_module_offset_y);
	}
	,cancel_module_drag: function() {
		this.drag_module.move(this.drag_module_prev_x,this.drag_module_prev_y);
	}
	,redraw_modules: function(modules) {
		var _g = 0;
		while(_g < modules.length) {
			var m = modules[_g];
			++_g;
			this.rendering_context.drawImage(m.image,m.x,m.y);
		}
	}
	,drawBack: function() {
		this.rendering_context.clearRect(0,0,this.canvae_width,this.canvas_height);
		this.rendering_context.beginPath();
		this.rendering_context.lineWidth = 2;
		this.rendering_context.strokeStyle = "#000000";
		this.rendering_context.moveTo(0,0);
		this.rendering_context.lineTo(this.canvae_width - 1,0);
		this.rendering_context.lineTo(this.canvae_width - 1,this.canvas_height - 1);
		this.rendering_context.lineTo(0,this.canvas_height - 1);
		this.rendering_context.lineTo(0,0);
		this.rendering_context.moveTo(0,50);
		this.rendering_context.lineTo(this.canvae_width - 1,50);
		this.rendering_context.stroke();
	}
	,drawLine: function(x1,y1,x2,y2,color) {
		if(color == null) {
			color = "#000000";
		}
		this.rendering_context.beginPath();
		this.rendering_context.lineWidth = 1;
		this.rendering_context.strokeStyle = color;
		this.rendering_context.moveTo(x1,y1);
		this.rendering_context.lineTo(x2,y2);
		this.rendering_context.stroke();
	}
	,drawText: function(align,q_bus_name,x,y,color) {
		if(color == null) {
			color = "#000000";
		}
		if(q_bus_name == "") {
			return;
		}
		this.rendering_context.beginPath();
		this.rendering_context.lineWidth = 1;
		this.rendering_context.strokeStyle = color;
		this.rendering_context.moveTo(x,y);
		if(align == "left") {
			this.rendering_context.lineTo(x + 5,y);
		} else {
			this.rendering_context.lineTo(x - 5,y);
		}
		this.rendering_context.stroke();
		this.rendering_context.fillStyle = color;
		var _this_r = new RegExp("[0-9]+px ","".split("u").join(""));
		var tmp = this.rendering_context.font.replace(_this_r,"12px ");
		this.rendering_context.font = tmp;
		this.rendering_context.textAlign = align;
		if(align == "left") {
			this.rendering_context.fillText(q_bus_name,x + 7,y + 3);
		} else {
			this.rendering_context.fillText(q_bus_name,x - 7,y + 3);
		}
	}
	,redraw_cables: function(module_arr) {
		var _g = 0;
		while(_g < module_arr.length) {
			var module = module_arr[_g];
			++_g;
			var _g1 = 0;
			var _g11 = module.output_arr;
			while(_g1 < _g11.length) {
				var output = _g11[_g1];
				++_g1;
				var p1 = output.get_point();
				var _g2 = 0;
				var _g12 = output.next_input_arr;
				while(_g2 < _g12.length) {
					var next_input = _g12[_g2];
					++_g2;
					var p2 = next_input.get_point();
					this.drawLine(p1.x,p1.y,p2.x,p2.y);
				}
				this.drawText("left",output.quick_bus_name,p1.x,p1.y);
				var _g21 = 0;
				var _g3 = output.quick_bus_next_input_arr;
				while(_g21 < _g3.length) {
					var quick_bus_next_input = _g3[_g21];
					++_g21;
					var p21 = quick_bus_next_input.get_point();
					this.drawText("right",output.quick_bus_name,p21.x,p21.y);
				}
			}
			var _g22 = 0;
			var _g31 = module.input_arr;
			while(_g22 < _g31.length) {
				var input = _g31[_g22];
				++_g22;
				var p22 = input.get_point();
				this.drawText("right",input.quick_const,p22.x,p22.y);
			}
		}
	}
	,redraw: function() {
		this.drawBack();
		this.redraw_modules(this._module_arr);
		this.redraw_modules(this._original_module_arr);
		this.redraw_cables(this._module_arr);
	}
	,getConnectedInput: function(offset) {
		var _g = 0;
		var _g1 = this._module_arr;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = module.output_arr;
			while(_g2 < _g11.length) {
				var output = _g11[_g2];
				++_g2;
				var _g3 = 0;
				var _g12 = output.next_input_arr;
				while(_g3 < _g12.length) {
					var next_input = _g12[_g3];
					++_g3;
					var p = next_input.get_point();
					if(ConnectionEditor.squareDistance(p.x,p.y,offset.x,offset.y) < this.tol * this.tol) {
						return next_input;
					}
				}
			}
		}
		return null;
	}
	,getHitModuleOutput: function(offset) {
		var _g = 0;
		var _g1 = this._module_arr;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			var k = m.hit_test_with_output(offset,this.tol);
			if(k >= 0) {
				return m.output_arr[k];
			}
		}
		return null;
	}
	,getHitModuleInput: function(offset) {
		var _g = 0;
		var _g1 = this._module_arr;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			var k = m.hit_test_with_input(offset,this.tol);
			if(k >= 0) {
				return m.input_arr[k];
			}
		}
		return null;
	}
	,getHitModule: function(offset) {
		var _g = 0;
		var _g1 = this._module_arr;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.hit_test_with_main(offset) == true) {
				return m;
			}
		}
		return null;
	}
	,getHitModule2222: function(offset) {
		var _g = 0;
		var _g1 = this._original_module_arr;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.hit_test_with_main(offset) == true) {
				return m;
			}
		}
		return null;
	}
	,getResisterdQuickBus: function(name) {
		var _g = 0;
		var _g1 = this._module_arr;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = module.output_arr;
			while(_g2 < _g11.length) {
				var output = _g11[_g2];
				++_g2;
				if(name == output.quick_bus_name) {
					return output;
				}
			}
		}
		return null;
	}
	,is_module_inside_view: function(big) {
		if(this.drag_module == null) {
			return false;
		}
		var line_y = 0;
		if(big == false) {
			line_y = 50;
		}
		if(0 <= this.drag_module.x && this.drag_module.x + this.drag_module.w < this.canvae_width && line_y <= this.drag_module.y && this.drag_module.y + this.drag_module.h < this.canvas_height) {
			return true;
		} else {
			return false;
		}
	}
	,calc_module_order: function() {
		var _g = 0;
		var _g1 = this._module_arr;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = module.input_arr;
			while(_g2 < _g11.length) {
				var input = _g11[_g2];
				++_g2;
				input.stream_updated = false;
			}
		}
		var module_seqence = [];
		var _g21 = 0;
		var _g3 = this._module_arr;
		while(_g21 < _g3.length) {
			var m = _g3[_g21];
			++_g21;
			if(m.name == "delay_module") {
				var delay_m = m;
				module_seqence = module_seqence.concat(delay_m.delay_update());
			}
		}
		this._module_seqence = module_seqence.concat(this._input_module.stream_update());
	}
	,__class__: ConnectionEditor
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var ImageLoader = function() { };
ImageLoader.__name__ = true;
ImageLoader.load = function(name_list,Image_Loaded) {
	var loaded_image_prop = new haxe_ds_StringMap();
	var loaded_image_count = 0;
	var _g = 0;
	while(_g < name_list.length) {
		var a = name_list[_g];
		++_g;
		var v = new Image();
		if(__map_reserved[a] != null) {
			loaded_image_prop.setReserved(a,v);
		} else {
			loaded_image_prop.h[a] = v;
		}
		(__map_reserved[a] != null ? loaded_image_prop.getReserved(a) : loaded_image_prop.h[a]).onload = function(e) {
			loaded_image_count += 1;
			if(name_list.length == loaded_image_count) {
				Image_Loaded(loaded_image_prop);
			}
		};
		(__map_reserved[a] != null ? loaded_image_prop.getReserved(a) : loaded_image_prop.h[a]).src = "img/" + a + ".png";
	}
};
var JsonConverter = function() { };
JsonConverter.__name__ = true;
JsonConverter.getSaveObject = function(module_arr,ctrl_arr) {
	var module_arr2 = module_arr.slice();
	module_arr2.sort(function(m1,m2) {
		if(m1.name != "control_module" && m2.name != "control_module") {
			return 0;
		}
		if(m1.name != "control_module") {
			return 1;
		}
		if(m2.name != "control_module") {
			return -1;
		}
		var ctrl1 = m1;
		var ctrl2 = m2;
		return ctrl1.idx - ctrl2.idx;
	});
	var result = new Array(module_arr2.length);
	var _g = 0;
	var _g1 = module_arr2.length;
	while(_g < _g1) {
		var i = _g++;
		var module = module_arr2[i];
		var _this = module.output_arr;
		var result1 = new Array(_this.length);
		var _g2 = 0;
		var _g11 = _this.length;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var output = _this[i1];
			var _this1 = output.next_input_arr;
			var result2 = new Array(_this1.length);
			var _g3 = 0;
			var _g12 = _this1.length;
			while(_g3 < _g12) {
				var i2 = _g3++;
				var next_input = _this1[i2];
				var next_module_idx = module_arr2.indexOf(next_input.module);
				result2[i2] = { next_module_index : next_module_idx, next_input_index : next_input.index};
			}
			var next_inputs = result2;
			var _this2 = output.quick_bus_next_input_arr;
			var result3 = new Array(_this2.length);
			var _g4 = 0;
			var _g13 = _this2.length;
			while(_g4 < _g13) {
				var i3 = _g4++;
				var next_input1 = _this2[i3];
				var next_module_idx1 = module_arr2.indexOf(next_input1.module);
				result3[i3] = { next_module_index : next_module_idx1, next_input_index : next_input1.index};
			}
			var quick_bus_next_inputs = result3;
			result1[i1] = { next_inputs : next_inputs, quick_bus_name : output.quick_bus_name, quick_bus_next_inputs : quick_bus_next_inputs};
		}
		var outputs = result1;
		var _this3 = module.input_arr;
		var result4 = new Array(_this3.length);
		var _g5 = 0;
		var _g14 = _this3.length;
		while(_g5 < _g14) {
			var i4 = _g5++;
			result4[i4] = { quick_const : _this3[i4].quick_const};
		}
		var inputs = result4;
		result[i] = { module_name : module.name, module_x : module.x, module_y : module.y - 50, outputs : outputs, inputs : inputs};
	}
	var module_json = result;
	var result5 = new Array(ctrl_arr.length);
	var _g6 = 0;
	var _g15 = ctrl_arr.length;
	while(_g6 < _g15) {
		var i5 = _g6++;
		var ctrl = ctrl_arr[i5];
		result5[i5] = { min : ctrl.getAttribute("min"), max : ctrl.getAttribute("max"), step : ctrl.getAttribute("step"), value : ctrl.value};
	}
	var ctrl_json = result5;
	return { module_info : module_json, control_info : ctrl_json};
};
JsonConverter.aaa = function(module_creator,loaded_data) {
	var module_arr = [];
	var module_info = loaded_data.module_info;
	var _g = 0;
	while(_g < module_info.length) {
		var m = module_info[_g];
		++_g;
		var newmodule = module_creator.CreateByName(m.module_name,m.module_x,m.module_y + 50);
		module_arr.push(newmodule);
	}
	var _g1 = 0;
	var _g2 = loaded_data.module_info.length;
	while(_g1 < _g2) {
		var module_index = _g1++;
		var m1 = loaded_data.module_info[module_index];
		var _g11 = 0;
		var _g21 = m1.inputs.length;
		while(_g11 < _g21) {
			var input_index = _g11++;
			var input = m1.inputs[input_index];
			if(input.quick_const != "") {
				module_arr[module_index].input_arr[input_index].quick_const = input.quick_const;
				var tmp = parseFloat(input.quick_const);
				module_arr[module_index].input_arr[input_index].value1 = tmp;
				var tmp1 = parseFloat(input.quick_const);
				module_arr[module_index].input_arr[input_index].value2 = tmp1;
				module_arr[module_index].input_arr[input_index].module.constant_update(true);
			}
		}
		var _g3 = 0;
		var _g4 = m1.outputs.length;
		while(_g3 < _g4) {
			var output_index = _g3++;
			var output = m1.outputs[output_index];
			var next_inputs = output.next_inputs;
			var _g31 = 0;
			while(_g31 < next_inputs.length) {
				var next = next_inputs[_g31];
				++_g31;
				var next_input = module_arr[next.next_module_index].input_arr[next.next_input_index];
				module_arr[module_index].output_arr[output_index].connect(next_input);
			}
			var quick_bus_next_inputs = output.quick_bus_next_inputs;
			var _g41 = 0;
			while(_g41 < quick_bus_next_inputs.length) {
				var next1 = quick_bus_next_inputs[_g41];
				++_g41;
				var next_input1 = module_arr[next1.next_module_index].input_arr[next1.next_input_index];
				module_arr[module_index].output_arr[output_index].quick_bus_name = output.quick_bus_name;
				module_arr[module_index].output_arr[output_index].connect_quickbus(next_input1);
			}
		}
	}
	return module_arr;
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.foreach = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var recent_loader = new RecentLoader();
	new Vue({ el : "#recent", data : { selected : "", options : [], recent_range : ""}, methods : { recent_backward_click : function() {
		var recent_save_data = recent_loader.get_recent_backward();
		if(recent_save_data != null) {
			this.selected = recent_save_data.recent_select[0].value;
			this.options = recent_save_data.recent_select;
			this.recent_range = recent_save_data.recent_range;
		}
		return;
	}, recent_forward_click : function() {
		var recent_save_data1 = recent_loader.get_recent_forward();
		if(recent_save_data1 != null) {
			this.selected = recent_save_data1.recent_select[0].value;
			this.options = recent_save_data1.recent_select;
			this.recent_range = recent_save_data1.recent_range;
		}
		return;
	}, recent_load_click : function() {
		var selected_option_value = this.selected;
		return window.location.href = window.location.pathname + "?" + selected_option_value;
	}}, created : function() {
		var recent_save_data2 = recent_loader.get_recent_backward();
		if(recent_save_data2 != null) {
			this.selected = recent_save_data2.recent_select[0].value;
			this.options = recent_save_data2.recent_select;
			this.recent_range = recent_save_data2.recent_range;
		}
		return;
	}});
	window.onload = Main.windowLoaded;
};
Main.squareDistance = function(x1,y1,x2,y2) {
	return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
};
Main.getOffset = function(e) {
	return { x : e.pageX - e.target.offsetLeft, y : e.pageY - e.target.offsetTop};
};
Main.editSlider = function(slider) {
	while(true) {
		var str = window.prompt("Input min, max, step.",slider.getAttribute("min") + ", " + slider.getAttribute("max") + ", " + slider.getAttribute("step"));
		if(str == null) {
			return false;
		}
		if(str == "") {
			slider.setAttribute("min","0.0");
			slider.setAttribute("max","1.0");
			slider.setAttribute("step","0.01");
			slider.value = "0.5";
		} else {
			var str_split = str.split(",");
			if(str_split.length != 3) {
				continue;
			}
			var min_str = str_split[0];
			var max_str = str_split[1];
			var step_str = str_split[2];
			var min = Number(min_str);
			var max = Number(max_str);
			var step = Number(step_str);
			if(isNaN(min) || isNaN(max) || isNaN(step)) {
				continue;
			}
			if(min >= max) {
				continue;
			}
			if(step <= 0.0) {
				continue;
			}
			var value = parseFloat(slider.value);
			if(value < min) {
				value = min;
			} else if(max < value) {
				value = max;
			}
			slider.setAttribute("min",min == null ? "null" : "" + min);
			slider.setAttribute("max",max == null ? "null" : "" + max);
			slider.setAttribute("step",step == null ? "null" : "" + step);
			slider.value = value == null ? "null" : "" + value;
		}
		break;
	}
	slider.dispatchEvent(new Event("input"));
	return true;
};
Main.Modified = function() {
	if(Main._edit == false) {
		Main._button_commit.removeAttribute("disabled");
		Main._button_revert.removeAttribute("disabled");
		Main._button_clear.removeAttribute("disabled");
		Main._edit = true;
	}
};
Main.confirm_removing_module = function() {
	var delete_ok = false;
	if(Main._canvas.drag_module.removable == true) {
		Main._display_prompt = true;
		delete_ok = window.confirm("May the module be deleted?");
		Main._display_prompt = false;
	}
	if(delete_ok == true) {
		Main._canvas._module_arr.pop().removeModule();
		Main._canvas.calc_module_order();
	} else {
		Main._canvas.cancel_module_drag();
	}
};
Main.quick_edit_input = function(input) {
	var org_busName = "";
	if(input.quick_const != "") {
		org_busName = input.quick_const;
	} else if(input.prev_output != null) {
		org_busName = input.prev_output.quick_bus_name;
	}
	Main._display_prompt = true;
	var q_bus_or_const_name = window.prompt("Input QuickBus or QuickConst.",org_busName);
	Main._display_prompt = false;
	if(q_bus_or_const_name != null && q_bus_or_const_name != org_busName) {
		if(q_bus_or_const_name == "") {
			input.update_quick_const("",0.0);
			if(input.prev_output != null) {
				input.prev_output.disconnect_quickbus(input);
			}
		} else {
			var q_const = Number(q_bus_or_const_name);
			if(isNaN(q_const) == false) {
				if(input.prev_output != null) {
					input.prev_output.disconnect_quickbus(input);
				}
				input.update_quick_const(q_bus_or_const_name,q_const);
			} else {
				input.update_quick_const("",0.0);
				var new_output = Main._canvas.getResisterdQuickBus(q_bus_or_const_name);
				if(new_output != null) {
					if(input.prev_output != null) {
						input.prev_output.disconnect_quickbus(input);
					}
					if(input.module.isLoop(new_output.module)) {
						window.alert("A recursive loop was detected.");
					} else {
						new_output.connect_quickbus(input);
					}
				} else {
					window.alert("The input name is not registered as QuickBus.");
				}
			}
		}
		Main._canvas.calc_module_order();
	}
};
Main.quick_edit_output = function(output) {
	Main._display_prompt = true;
	var q_bus_name = window.prompt("Input QuickBus.",output.quick_bus_name);
	Main._display_prompt = false;
	if(q_bus_name != null && q_bus_name != output.quick_bus_name) {
		if(q_bus_name == "") {
			output.disconnect_quickbus();
		} else {
			var q_const = Number(q_bus_name);
			if(isNaN(q_const)) {
				var used_output = Main._canvas.getResisterdQuickBus(q_bus_name);
				if(used_output != null) {
					window.alert("The input name has been already registered as QuickBus.");
				} else {
					output.quick_bus_name = q_bus_name;
				}
			} else {
				window.alert("The input name has an error as QuickBus.");
			}
		}
		Main._canvas.calc_module_order();
	}
};
Main.mousedown = function(e) {
	if(e.button != 0) {
		return;
	}
	Main._moved = false;
	var offset = Main.getOffset(e);
	var connected_input = Main._canvas.getConnectedInput(offset);
	if(connected_input != null) {
		var output = connected_input.prev_output;
		output.disconnect(connected_input);
		Main._canvas.calc_module_order();
		Main._canvas.start_cable_drag(output,null);
		Main._moved = true;
	} else {
		var input = Main._canvas.getHitModuleInput(offset);
		if(input != null) {
			Main._canvas.start_cable_drag(null,input);
		} else {
			var output1 = Main._canvas.getHitModuleOutput(offset);
			if(output1 != null) {
				Main._canvas.start_cable_drag(output1,null);
			} else {
				var module = Main._canvas.getHitModule(offset);
				if(module != null) {
					HxOverrides.remove(Main._canvas._module_arr,module);
					Main._canvas._module_arr.push(module);
					Main._canvas.start_module_drag(module,offset.x,offset.y);
				} else {
					var original_module = Main._canvas.getHitModule2222(offset);
					if(original_module != null) {
						Main._canvas.start_module_drag(original_module,offset.x,offset.y);
					}
				}
			}
		}
		Main._moved = false;
	}
};
Main.mousemove = function(e) {
	if(Main._display_prompt == true) {
		return;
	}
	var offset = Main.getOffset(e);
	if(Main._canvas.is_cable_dragging() == false && Main._canvas.drag_module == null) {
		return;
	}
	if(Main._canvas.is_cable_dragging()) {
		var p = Main._canvas.get_cable_point();
		Main._moved = Main._moved || Main.squareDistance(p.x,p.y,offset.x,offset.y) >= 100;
	} else if(Main._canvas.drag_module != null) {
		var all = Main._canvas._original_module_arr.indexOf(Main._canvas.drag_module) >= 0;
		var inside = Main._canvas.is_module_inside_view(all);
		if(inside == false) {
			Main.confirm_removing_module();
			Main._canvas.drag_module = null;
		} else {
			Main._canvas.end_module_drag(offset);
		}
	}
	Main._canvas.redraw();
	if(Main._canvas.is_cable_dragging()) {
		var p1 = Main._canvas.get_cable_point();
		Main._canvas.drawLine(p1.x,p1.y,offset.x,offset.y);
	}
};
Main.mouseup = function(e) {
	var offset = Main.getOffset(e);
	Main.Modified();
	if(Main._canvas.is_cable_dragging()) {
		if(Main._canvas.end != null) {
			if(Main._moved == false) {
				Main.quick_edit_input(Main._canvas.end);
			} else if(Main._canvas.end.quick_const == "") {
				if(Main._canvas.end.prev_output == null) {
					var output = Main._canvas.getHitModuleOutput(offset);
					if(output != null) {
						if(output.module != Main._canvas.end.module) {
							if(Main._canvas.end.module.isLoop(output.module)) {
								window.alert("A recursive loop was detected.");
							} else {
								output.connect(Main._canvas.end);
								Main._canvas.calc_module_order();
							}
						}
					}
				}
			}
		} else if(Main._moved == false) {
			Main.quick_edit_output(Main._canvas.start);
		} else {
			var input = Main._canvas.getHitModuleInput(offset);
			if(input != null) {
				if(input.quick_const == "") {
					if(input.module != Main._canvas.start.module) {
						if(input.prev_output == null) {
							if(input.module.isLoop(Main._canvas.start.module)) {
								window.alert("A recursive loop was detected.");
							} else {
								Main._canvas.start.connect(input);
								Main._canvas.calc_module_order();
							}
						}
					}
				}
			}
		}
		Main._canvas.start = null;
		Main._canvas.end = null;
	} else if(Main._canvas.drag_module != null) {
		if(Main._canvas._original_module_arr.indexOf(Main._canvas.drag_module) >= 0) {
			var inside = Main._canvas.is_module_inside_view(false);
			if(inside == true) {
				var org_m = Main._canvas.drag_module;
				var newmodule = Main._module_creator.CreateByName(org_m.name,org_m.x,org_m.y);
				Main._canvas._module_arr.push(newmodule);
			}
			Main._canvas.cancel_module_drag();
		}
		Main._canvas.drag_module = null;
	}
	Main._canvas.redraw();
};
Main.mouseout = function(e) {
	if(Main._display_prompt == true) {
		return;
	}
	if(Main._canvas.is_cable_dragging() == false && Main._canvas.drag_module == null) {
		return;
	}
	if(Main._canvas.is_cable_dragging()) {
		Main._canvas.start = null;
		Main._canvas.end = null;
	} else if(Main._canvas.drag_module != null) {
		Main.confirm_removing_module();
		Main._canvas.drag_module = null;
	}
	Main._canvas.redraw();
};
Main.audio_error = function() {
	window.alert("An abnormal input signal was detected.");
	Main._wave_play.value = "Play";
	Main._wave_file.removeAttribute("disabled");
};
Main.wave_play_click = function() {
	if(Main._wave_play.value == "Stop") {
		Main._audio_processor.stop();
		Main._wave_play.value = "Play";
		Main._wave_save.removeAttribute("disabled");
		Main._wave_file.removeAttribute("disabled");
	} else {
		Main._wave_play.value = "Stop";
		Main._wave_save.setAttribute("disabled","disabled");
		Main._wave_file.setAttribute("disabled","disabled");
		var _g = 0;
		var _g1 = Main._canvas._module_arr;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.name == "samplerate_module") {
				m.output_arr[0].value1 = Main._audio_context.sampleRate;
				m.output_arr[0].value2 = Main._audio_context.sampleRate;
				m.constant_update(true);
			}
			if(m.name == "delay_module") {
				m.input_arr[0].value1 = 0.0;
				m.input_arr[0].value2 = 0.0;
			}
		}
		Main._audio_processor.start(Main._decodedBuffer);
	}
};
Main.wave_save_click = function() {
	var _g = 0;
	var _g1 = Main._canvas._module_arr;
	while(_g < _g1.length) {
		var m = _g1[_g];
		++_g;
		if(m.name == "samplerate_module") {
			m.output_arr[0].value1 = Main._audio_context.sampleRate;
			m.output_arr[0].value2 = Main._audio_context.sampleRate;
			m.constant_update(true);
		}
		if(m.name == "delay_module") {
			m.input_arr[0].value1 = 0.0;
			m.input_arr[0].value2 = 0.0;
		}
	}
	var rander = new AudioWriter(Main._canvas,Main._decodedBuffer);
	var wavebuf = rander.start();
	if(wavebuf != null) {
		var blob = new Blob([wavebuf],{ "type" : "audio/wav"});
		window.open(URL.createObjectURL(blob),"");
	} else {
		window.alert("???");
	}
};
Main.decodeFinished = function(buffer) {
	Main._decodedBuffer = buffer;
	Main._wave_play.removeAttribute("disabled");
	Main._wave_save.removeAttribute("disabled");
	Main._wave_file.removeAttribute("disabled");
	return true;
};
Main.wave_file_change = function(e) {
	Main._wave_play.setAttribute("disabled","disabled");
	Main._wave_save.setAttribute("disabled","disabled");
	var file_selector = js_Boot.__cast(e.target , HTMLInputElement);
	if(file_selector.files.length == 0) {
		return;
	}
	var audiofile = file_selector.files[0];
	if(audiofile.type != "audio/wav" && audiofile.type != "audio/ogg" && audiofile.type != "video/ogg") {
		file_selector.value = "";
		window.alert("Please select wav/ogg file.");
		return;
	}
	Main._wave_file.setAttribute("disabled","disabled");
	Main._audio_file_loader.load(audiofile);
};
Main.windowLoaded = function() {
	Main._button_clear = window.document.getElementById("button_clear");
	Main._button_commit = window.document.getElementById("button_commit");
	Main._text_midi_msg = window.document.getElementById("text_midi_msg");
	Main._button_ctrl1 = window.document.getElementById("button_ctrl1");
	Main._button_ctrl2 = window.document.getElementById("button_ctrl2");
	Main._button_ctrl3 = window.document.getElementById("button_ctrl3");
	Main._button_learn1 = window.document.getElementById("button_learn1");
	Main._button_learn2 = window.document.getElementById("button_learn2");
	Main._button_learn3 = window.document.getElementById("button_learn3");
	Main._button_revert = window.document.getElementById("button_revert");
	Main._slider_ctrl1 = js_Boot.__cast(window.document.getElementById("slider_ctrl1") , HTMLInputElement);
	Main._slider_ctrl2 = js_Boot.__cast(window.document.getElementById("slider_ctrl2") , HTMLInputElement);
	Main._slider_ctrl3 = js_Boot.__cast(window.document.getElementById("slider_ctrl3") , HTMLInputElement);
	Main._slider_volume = js_Boot.__cast(window.document.getElementById("slider_volume") , HTMLInputElement);
	Main._text_ctrl1 = window.document.getElementById("text_ctrl1");
	Main._text_ctrl2 = window.document.getElementById("text_ctrl2");
	Main._text_ctrl3 = window.document.getElementById("text_ctrl3");
	Main._text_volume = window.document.getElementById("text_volume");
	Main._wave_file = window.document.getElementById("wave_file");
	Main._wave_play = js_Boot.__cast(window.document.getElementById("wave_play") , HTMLInputElement);
	Main._wave_save = window.document.getElementById("wave_save");
	Main._work_view = js_Boot.__cast(window.document.getElementById("work_view") , HTMLCanvasElement);
	Main._wave_play.setAttribute("disabled","disabled");
	Main._wave_save.setAttribute("disabled","disabled");
	var navigator = window.navigator;
	if(navigator.requestMIDIAccess) {
		navigator.requestMIDIAccess().then(Main.onMIDIInit);
	} else {
		window.alert("navigator.requestMIDIAccess == null");
	}
	Main._work_view.setAttribute("width","800");
	Main._work_view.setAttribute("height","400");
	Main._canvas = new ConnectionEditor(Main._work_view);
	Main._wave_play.addEventListener("click",Main.wave_play_click);
	Main._wave_save.addEventListener("click",Main.wave_save_click);
	Main._wave_file.addEventListener("change",Main.wave_file_change);
	Main._slider_volume.addEventListener("input",function(e) {
		var srt_value = Main._slider_volume.value;
		Main._text_volume.textContent = srt_value;
		Main._audio_processor.update_gain(parseFloat(srt_value));
	});
	Main._audio_context = new AudioContext();
	if(Main._audio_context == null) {
		Main._button_ctrl1.setAttribute("disabled","disabled");
		Main._button_ctrl2.setAttribute("disabled","disabled");
		Main._button_ctrl3.setAttribute("disabled","disabled");
		Main._button_commit.setAttribute("disabled","disabled");
		Main._button_revert.setAttribute("disabled","disabled");
		Main._button_clear.setAttribute("disabled","disabled");
		return;
	}
	Main._audio_file_loader = new AudioFileReader(Main.decodeFinished,function() {
		return;
	});
	Main._audio_processor = new AudioProcessor(Main._canvas,Main.audio_error);
	Main._slider_volume.dispatchEvent(new Event("input"));
	Main._work_view.addEventListener("mousedown",Main.mousedown);
	Main._work_view.addEventListener("mousemove",Main.mousemove);
	Main._work_view.addEventListener("mouseup",Main.mouseup);
	Main._work_view.addEventListener("mouseout",Main.mouseout);
	Main._button_ctrl1.addEventListener("click",function() {
		var success = Main.editSlider(Main._slider_ctrl1);
		if(success == true) {
			Main.Modified();
		}
		return;
	});
	Main._button_ctrl2.addEventListener("click",function() {
		var success1 = Main.editSlider(Main._slider_ctrl2);
		if(success1 == true) {
			Main.Modified();
		}
		return;
	});
	Main._button_ctrl3.addEventListener("click",function() {
		var success2 = Main.editSlider(Main._slider_ctrl3);
		if(success2 == true) {
			Main.Modified();
		}
		return;
	});
	Main._button_learn1.addEventListener("click",function() {
		if(Main._current_midi_msg >= 0) {
			Main._midi_learn1 = Main._current_midi_msg;
		}
		return;
	});
	Main._button_learn2.addEventListener("click",function() {
		if(Main._current_midi_msg >= 0) {
			Main._midi_learn2 = Main._current_midi_msg;
		}
		return;
	});
	Main._button_learn3.addEventListener("click",function() {
		if(Main._current_midi_msg >= 0) {
			Main._midi_learn3 = Main._current_midi_msg;
		}
		return;
	});
	Main._slider_ctrl1.addEventListener("input",function() {
		var str_value = Main._slider_ctrl1.value;
		Main._text_ctrl1.textContent = str_value;
		Main._canvas._ctrl_module_arr[0].value = parseFloat(str_value);
		Main._canvas._ctrl_module_arr[0].constant_update(true);
		Main.Modified();
		return;
	});
	Main._slider_ctrl2.addEventListener("input",function() {
		var str_value1 = Main._slider_ctrl2.value;
		Main._text_ctrl2.textContent = str_value1;
		Main._canvas._ctrl_module_arr[1].value = parseFloat(str_value1);
		Main._canvas._ctrl_module_arr[1].constant_update(true);
		Main.Modified();
		return;
	});
	Main._slider_ctrl3.addEventListener("input",function() {
		var str_value2 = Main._slider_ctrl3.value;
		Main._text_ctrl3.textContent = str_value2;
		Main._canvas._ctrl_module_arr[2].value = parseFloat(str_value2);
		Main._canvas._ctrl_module_arr[2].constant_update(true);
		Main.Modified();
		return;
	});
	Main._button_commit.addEventListener("click",function() {
		var json_string = JSON.stringify(JsonConverter.getSaveObject(Main._canvas._module_arr,[Main._slider_ctrl1,Main._slider_ctrl2,Main._slider_ctrl3]));
		var request = new XMLHttpRequest();
		request.open("POST","commit.cgi",false);
		request.send(json_string);
		if(request.status == 200) {
			window.location.href = window.location.pathname + "?" + Std.string(request.response);
		} else {
			window.alert("commit error");
		}
		return;
	});
	Main._button_revert.addEventListener("click",function() {
		window.location.reload(true);
		return;
	});
	Main._button_clear.addEventListener("click",function() {
		return window.location.href = window.location.pathname;
	});
	var name_list = ["input_module","output_module","add_module","subtract_module","multiply_module","divide_module","sqrt_module","sin_module","cos_module","tan_module","samplerate_module","min_module","max_module","delay_module","control_module_1","control_module_2","control_module_3"];
	ImageLoader.load(name_list,Main.Image_Loaded);
};
Main.Image_Loaded = function(img_map) {
	Main._module_creator = new ModuleCreator(img_map);
	Main._canvas._original_module_arr.push(Main._module_creator.CreateByName("add_module",100,10,false));
	Main._canvas._original_module_arr.push(Main._module_creator.CreateByName("subtract_module",150,10,false));
	Main._canvas._original_module_arr.push(Main._module_creator.CreateByName("multiply_module",200,10,false));
	Main._canvas._original_module_arr.push(Main._module_creator.CreateByName("divide_module",250,10,false));
	Main._canvas._original_module_arr.push(Main._module_creator.CreateByName("min_module",300,10,false));
	Main._canvas._original_module_arr.push(Main._module_creator.CreateByName("max_module",350,10,false));
	Main._canvas._original_module_arr.push(Main._module_creator.CreateByName("delay_module",400,20,false));
	Main._canvas._original_module_arr.push(Main._module_creator.CreateByName("sqrt_module",450,20,false));
	Main._canvas._original_module_arr.push(Main._module_creator.CreateByName("sin_module",500,20,false));
	Main._canvas._original_module_arr.push(Main._module_creator.CreateByName("cos_module",550,20,false));
	Main._canvas._original_module_arr.push(Main._module_creator.CreateByName("tan_module",600,20,false));
	if(window.location.search.length > 0) {
		var request = new XMLHttpRequest();
		request.open("POST","load.cgi",false);
		request.send(window.location.search.substring(1));
		if(request.status != 200) {
			window.alert("load error");
			return;
		}
		if(request.response.length <= 0) {
			window.location.href = window.location.pathname;
			return;
		}
		try {
			var loaded_data = JSON.parse(request.response);
			Main._canvas._module_arr = JsonConverter.aaa(Main._module_creator,loaded_data);
			Main._canvas._ctrl_module_arr = [];
			var _g = 0;
			var _g1 = Main._canvas._module_arr;
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				if(m.name == "control_module") {
					Main._canvas._ctrl_module_arr.push(m);
				} else if(m.name == "input_module") {
					Main._canvas._input_module = m;
				} else if(m.name == "output_module") {
					Main._canvas._output_module = m;
				}
			}
			var control_info = loaded_data.control_info;
			var _g2 = 0;
			var _g3 = control_info.length;
			while(_g2 < _g3) {
				var ctrl_idx = _g2++;
				var ctrl = control_info[ctrl_idx];
				var slider;
				if(ctrl_idx == 0) {
					slider = Main._slider_ctrl1;
				} else if(ctrl_idx == 1) {
					slider = Main._slider_ctrl2;
				} else if(ctrl_idx == 2) {
					slider = Main._slider_ctrl3;
				} else {
					return;
				}
				slider.setAttribute("min",ctrl.min);
				slider.setAttribute("max",ctrl.max);
				slider.setAttribute("step",ctrl.step);
				slider.value = ctrl.value;
				slider.dispatchEvent(new Event("input"));
			}
			Main._button_clear.removeAttribute("disabled");
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			window.alert("データが不正です。");
			window.location.href = window.location.pathname;
		}
	} else {
		var input_module = Main._module_creator.CreateByName("input_module",4,100,false);
		Main._canvas._module_arr.push(input_module);
		Main._canvas._input_module = input_module;
		var output_module = Main._module_creator.CreateByName("output_module",750,100,false);
		Main._canvas._module_arr.push(output_module);
		Main._canvas._output_module = output_module;
		var ctrl1_module = Main._module_creator.CreateByName("control_module",4,150,false);
		Main._canvas._module_arr.push(ctrl1_module);
		Main._canvas._ctrl_module_arr.push(ctrl1_module);
		var ctrl2_module = Main._module_creator.CreateByName("control_module",4,200,false);
		Main._canvas._module_arr.push(ctrl2_module);
		Main._canvas._ctrl_module_arr.push(ctrl2_module);
		var ctrl3_module = Main._module_creator.CreateByName("control_module",4,250,false);
		Main._canvas._module_arr.push(ctrl3_module);
		Main._canvas._ctrl_module_arr.push(ctrl3_module);
		var samplerate_module = Main._module_creator.CreateByName("samplerate_module",4,300,false);
		Main._canvas._module_arr.push(samplerate_module);
		Main._canvas._samplerate_module = samplerate_module;
		Main._slider_ctrl1.dispatchEvent(new Event("input"));
		Main._slider_ctrl2.dispatchEvent(new Event("input"));
		Main._slider_ctrl3.dispatchEvent(new Event("input"));
	}
	Main._button_commit.setAttribute("disabled","disabled");
	Main._button_revert.setAttribute("disabled","disabled");
	Main._wave_file.removeAttribute("disabled");
	Main._canvas.redraw();
	Main._edit = false;
	Main._canvas.calc_module_order();
};
Main.onMIDIInit = function(m) {
	var it = m.inputs.values();
	var o = it.next();
	while(o.done == false) {
		window.document.getElementById("text_midi_in_device").textContent = o.value.name;
		o.value.onmidimessage = Main.onmidimessage;
		o = it.next();
	}
};
Main.onmidimessage = function(e) {
	var tmp = "0x" + e.data[0].toString(16) + " 0x" + e.data[1].toString(16) + " 0x";
	var tmp1 = e.data[2].toString(16);
	Main._text_midi_msg.textContent = tmp + tmp1;
	Main._current_midi_msg = e.data[1];
	var t = e.data[2] / 127.0;
	if(Main._midi_learn1 == Main._current_midi_msg) {
		var min1 = parseFloat(Main._slider_ctrl1.getAttribute("min"));
		var max1 = parseFloat(Main._slider_ctrl1.getAttribute("max"));
		Main._slider_ctrl1.value = Std.string(min1 * (1 - t) + max1 * t);
		Main._slider_ctrl1.dispatchEvent(new Event("input"));
	}
	if(Main._midi_learn2 == Main._current_midi_msg) {
		var min2 = parseFloat(Main._slider_ctrl2.getAttribute("min"));
		var max2 = parseFloat(Main._slider_ctrl2.getAttribute("max"));
		Main._slider_ctrl2.value = Std.string(min2 * (1 - t) + max2 * t);
		Main._slider_ctrl2.dispatchEvent(new Event("input"));
	}
	if(Main._midi_learn3 == Main._current_midi_msg) {
		var min3 = parseFloat(Main._slider_ctrl3.getAttribute("min"));
		var max3 = parseFloat(Main._slider_ctrl3.getAttribute("max"));
		Main._slider_ctrl3.value = Std.string(min3 * (1 - t) + max3 * t);
		Main._slider_ctrl3.dispatchEvent(new Event("input"));
	}
};
Math.__name__ = true;
var ModuleCreator = function(image_map) {
	this.ctrl_count = 0;
	this.image_map = image_map;
};
ModuleCreator.__name__ = true;
ModuleCreator.prototype = {
	CreateByName: function(name,x,y,removable) {
		if(removable == null) {
			removable = true;
		}
		if("control_module" == name) {
			this.ctrl_count++;
			var key = name + "_" + this.ctrl_count;
			var _this = this.image_map;
			return new module_ControlModule(x,y,__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key],this.ctrl_count);
		} else if("input_module" == name) {
			var _this1 = this.image_map;
			return new module_InputModule(x,y,__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]);
		} else if("output_module" == name) {
			var _this2 = this.image_map;
			return new module_OutputModule(x,y,__map_reserved[name] != null ? _this2.getReserved(name) : _this2.h[name]);
		} else if("samplerate_module" == name) {
			var _this3 = this.image_map;
			return new module_SampleRateModule(x,y,__map_reserved[name] != null ? _this3.getReserved(name) : _this3.h[name]);
		} else if("add_module" == name) {
			var _this4 = this.image_map;
			return new module_AddModule(x,y,removable,__map_reserved[name] != null ? _this4.getReserved(name) : _this4.h[name]);
		} else if("subtract_module" == name) {
			var _this5 = this.image_map;
			return new module_SubtractModule(x,y,removable,__map_reserved[name] != null ? _this5.getReserved(name) : _this5.h[name]);
		} else if("multiply_module" == name) {
			var _this6 = this.image_map;
			return new module_MultiplyModule(x,y,removable,__map_reserved[name] != null ? _this6.getReserved(name) : _this6.h[name]);
		} else if("divide_module" == name) {
			var _this7 = this.image_map;
			return new module_DivideModule(x,y,removable,__map_reserved[name] != null ? _this7.getReserved(name) : _this7.h[name]);
		} else if("sqrt_module" == name) {
			var _this8 = this.image_map;
			return new module_SqrtModule(x,y,removable,__map_reserved[name] != null ? _this8.getReserved(name) : _this8.h[name]);
		} else if("sin_module" == name) {
			var _this9 = this.image_map;
			return new module_SinModule(x,y,removable,__map_reserved[name] != null ? _this9.getReserved(name) : _this9.h[name]);
		} else if("cos_module" == name) {
			var _this10 = this.image_map;
			return new module_CosModule(x,y,removable,__map_reserved[name] != null ? _this10.getReserved(name) : _this10.h[name]);
		} else if("tan_module" == name) {
			var _this11 = this.image_map;
			return new module_TanModule(x,y,removable,__map_reserved[name] != null ? _this11.getReserved(name) : _this11.h[name]);
		} else if("delay_module" == name) {
			var _this12 = this.image_map;
			return new module_DelayModule(x,y,removable,__map_reserved[name] != null ? _this12.getReserved(name) : _this12.h[name]);
		} else if("min_module" == name) {
			var _this13 = this.image_map;
			return new module_MinModule(x,y,removable,__map_reserved[name] != null ? _this13.getReserved(name) : _this13.h[name]);
		} else if("max_module" == name) {
			var _this14 = this.image_map;
			return new module_MaxModule(x,y,removable,__map_reserved[name] != null ? _this14.getReserved(name) : _this14.h[name]);
		} else {
			return null;
		}
	}
	,__class__: ModuleCreator
};
var RecentLoader = function() {
	this.recent_offset = 0;
	this.limit = 20;
};
RecentLoader.__name__ = true;
RecentLoader.prototype = {
	get_recent_backward: function() {
		var recent_offset = this.recent_offset - this.limit >= 0 ? this.recent_offset - this.limit : 0;
		return this.get_recent(recent_offset);
	}
	,get_recent_forward: function() {
		var recent_offset = this.recent_offset + this.limit;
		return this.get_recent(recent_offset);
	}
	,get_recent: function(recent_offset) {
		var json_send_str = JSON.stringify({ limit : this.limit, offset : recent_offset});
		var request = new XMLHttpRequest();
		request.open("POST","recent.cgi",false);
		request.send(json_send_str);
		if(request.status == 200) {
			if(request.response.length > 0) {
				try {
					var json_obj = JSON.parse(request.response);
					var key_arr = json_obj.recent_key;
					var date_arr = json_obj.recent_date;
					if(key_arr.length > 0) {
						var recent_select = [];
						var _g = 0;
						var _g1 = key_arr.length;
						while(_g < _g1) {
							var i = _g++;
							recent_select.push({ html : Std.string(recent_offset + i + 1) + " | " + date_arr[i] + " | #" + key_arr[i], value : key_arr[i]});
						}
						var recent_range = Std.string(recent_offset + 1) + "-" + Std.string(recent_offset + key_arr.length);
						this.recent_offset = recent_offset;
						return { recent_select : recent_select, recent_range : recent_range};
					}
				} catch( e ) {
					var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				}
			}
		}
		return null;
	}
	,__class__: RecentLoader
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,__class__: haxe_ds_StringMap
};
var io_IOBase = function(module,index) {
	this.module = module;
	this.index = index;
	this.value1 = 0.0;
	this.value2 = 0.0;
};
io_IOBase.__name__ = true;
io_IOBase.prototype = {
	__class__: io_IOBase
};
var io_Input = function(module,index) {
	io_IOBase.call(this,module,index);
	this.prev_output = null;
	this.constant = true;
	this.quick_const = "";
	this.stream_updated = false;
};
io_Input.__name__ = true;
io_Input.__super__ = io_IOBase;
io_Input.prototype = $extend(io_IOBase.prototype,{
	get_point: function() {
		return this.module.get_input_point(this.index);
	}
	,connect_with_output: function(output) {
		this.prev_output = output;
		this.value1 = output.value1;
		this.value2 = output.value2;
		this.constant = output.module.is_constant();
		this.module.constant_update(true);
	}
	,update_quick_const: function(quick_const,value) {
		this.quick_const = quick_const;
		this.value1 = value;
		this.value2 = value;
		this.module.constant_update(true);
	}
	,disconnect_with_output: function() {
		this.prev_output = null;
		this.value1 = 0.0;
		this.value2 = 0.0;
		this.constant = true;
		this.module.constant_update(true);
	}
	,__class__: io_Input
});
var io_Output = function(module,index) {
	io_IOBase.call(this,module,index);
	this.next_input_arr = [];
	this.quick_bus_name = "";
	this.quick_bus_next_input_arr = [];
};
io_Output.__name__ = true;
io_Output.__super__ = io_IOBase;
io_Output.prototype = $extend(io_IOBase.prototype,{
	get_point: function() {
		return this.module.get_output_point(this.index);
	}
	,connect: function(input) {
		input.connect_with_output(this);
		this.next_input_arr.push(input);
	}
	,connect_quickbus: function(input) {
		input.connect_with_output(this);
		this.quick_bus_next_input_arr.push(input);
	}
	,disconnect: function(input) {
		if(input == null) {
			var _g = 0;
			var _g1 = this.next_input_arr;
			while(_g < _g1.length) {
				var input1 = _g1[_g];
				++_g;
				input1.disconnect_with_output();
			}
			this.next_input_arr.length = 0;
			return true;
		}
		var removeIndex = this.next_input_arr.indexOf(input);
		if(removeIndex >= 0) {
			input.disconnect_with_output();
			HxOverrides.remove(this.next_input_arr,input);
			return true;
		}
		return false;
	}
	,disconnect_quickbus: function(input) {
		if(input == null) {
			var _g = 0;
			var _g1 = this.quick_bus_next_input_arr;
			while(_g < _g1.length) {
				var input1 = _g1[_g];
				++_g;
				input1.disconnect_with_output();
			}
			this.quick_bus_next_input_arr.length = 0;
			this.quick_bus_name = "";
			return true;
		}
		var removeIndex = this.quick_bus_next_input_arr.indexOf(input);
		if(removeIndex >= 0) {
			input.disconnect_with_output();
			HxOverrides.remove(this.quick_bus_next_input_arr,input);
			return true;
		}
		return false;
	}
	,__class__: io_Output
});
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var module_ModuleBase = function(name,x,y,num_in,num_out,removable,image) {
	this.name = name;
	this.x = x;
	this.y = y;
	this.w = image.width;
	this.h = image.height;
	this.input_arr = [];
	var _g = 0;
	var _g1 = num_in;
	while(_g < _g1) {
		var i = _g++;
		this.input_arr.push(new io_Input(this,i));
	}
	this.output_arr = [];
	var _g2 = 0;
	var _g3 = num_out;
	while(_g2 < _g3) {
		var i1 = _g2++;
		this.output_arr.push(new io_Output(this,i1));
	}
	this.removable = removable;
	this.is_delay = false;
	this.image = image;
};
module_ModuleBase.__name__ = true;
module_ModuleBase.squareDistance = function(x1,y1,x2,y2) {
	return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
};
module_ModuleBase.prototype = {
	is_constant: function() {
		return Lambda.foreach(this.input_arr,function(input) {
			return input.constant;
		});
	}
	,constant_update: function(first) {
		if(this.is_delay == true && first == false) {
			return;
		}
		var is_constant = this.is_constant();
		if(is_constant == true) {
			this.evaluate();
		}
		var _g = 0;
		var _g1 = this.output_arr;
		while(_g < _g1.length) {
			var output = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = output.next_input_arr;
			while(_g2 < _g11.length) {
				var next_input = _g11[_g2];
				++_g2;
				if(is_constant == true) {
					next_input.value1 = output.value1;
					next_input.value2 = output.value2;
				}
				next_input.constant = is_constant;
				next_input.module.constant_update(false);
			}
			var _g21 = 0;
			var _g3 = output.quick_bus_next_input_arr;
			while(_g21 < _g3.length) {
				var next_input1 = _g3[_g21];
				++_g21;
				if(is_constant == true) {
					next_input1.value1 = output.value1;
					next_input1.value2 = output.value2;
				}
				next_input1.constant = is_constant;
				next_input1.module.constant_update(false);
			}
		}
	}
	,stream_update: function() {
		var order = [];
		var update = Lambda.foreach(this.input_arr,function(input) {
			if(!input.constant) {
				return input.stream_updated;
			} else {
				return true;
			}
		});
		if(update == true) {
			order.push(this);
			var _g = 0;
			var _g1 = this.output_arr;
			while(_g < _g1.length) {
				var output = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g11 = output.next_input_arr;
				while(_g2 < _g11.length) {
					var next_input = _g11[_g2];
					++_g2;
					next_input.stream_updated = true;
					order = order.concat(next_input.module.stream_update());
				}
				var _g21 = 0;
				var _g3 = output.quick_bus_next_input_arr;
				while(_g21 < _g3.length) {
					var next_input1 = _g3[_g21];
					++_g21;
					next_input1.stream_updated = true;
					order = order.concat(next_input1.module.stream_update());
				}
			}
		}
		return order;
	}
	,isLoop: function(prev_module) {
		if(this.is_delay == true) {
			return false;
		}
		if(prev_module == this) {
			return true;
		}
		var _g = 0;
		var _g1 = this.output_arr;
		while(_g < _g1.length) {
			var output = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = output.next_input_arr;
			while(_g2 < _g11.length) {
				var next_input = _g11[_g2];
				++_g2;
				var loop = next_input.module.isLoop(prev_module);
				if(loop == true) {
					return true;
				}
			}
			var _g21 = 0;
			var _g3 = output.quick_bus_next_input_arr;
			while(_g21 < _g3.length) {
				var next_input1 = _g3[_g21];
				++_g21;
				var loop1 = next_input1.module.isLoop(prev_module);
				if(loop1 == true) {
					return true;
				}
			}
		}
		return false;
	}
	,get_input_point: function(index) {
		var x = this.x;
		var interval_h = this.h / this.input_arr.length;
		var y = Math.round(this.y + (index + 0.5) * interval_h);
		return { x : x, y : y};
	}
	,get_output_point: function(index) {
		var x = this.x + this.w;
		var interval_h = this.h / this.output_arr.length;
		var y = Math.round(this.y + (index + 0.5) * interval_h);
		return { x : x, y : y};
	}
	,hit_test_with_input: function(offset,tol) {
		if(this.input_arr.length > 0) {
			var point_x = this.x;
			var interval_h = this.h / this.input_arr.length;
			var _g = 0;
			var _g1 = this.input_arr.length;
			while(_g < _g1) {
				var i = _g++;
				var point_y = Math.round(this.y + (i + 0.5) * interval_h);
				if(module_ModuleBase.squareDistance(point_x,point_y,offset.x,offset.y) < tol * tol) {
					return i;
				}
			}
		}
		return -1;
	}
	,hit_test_with_output: function(offset,tol) {
		if(this.output_arr.length > 0) {
			var point_x = this.x + this.w;
			var interval_h = this.h / this.output_arr.length;
			var _g = 0;
			var _g1 = this.output_arr.length;
			while(_g < _g1) {
				var i = _g++;
				var point_y = Math.round(this.y + (i + 0.5) * interval_h);
				if(module_ModuleBase.squareDistance(point_x,point_y,offset.x,offset.y) < tol * tol) {
					return i;
				}
			}
		}
		return -1;
	}
	,hit_test_with_main: function(offset) {
		if(this.x <= offset.x && offset.x <= this.x + this.w && this.y <= offset.y && offset.y <= this.y + this.h) {
			return true;
		} else {
			return false;
		}
	}
	,move: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,removeModule: function() {
		var _g = 0;
		var _g1 = this.output_arr;
		while(_g < _g1.length) {
			var output = _g1[_g];
			++_g;
			output.disconnect();
			output.disconnect_quickbus();
		}
		var _g2 = 0;
		var _g3 = this.input_arr;
		while(_g2 < _g3.length) {
			var input = _g3[_g2];
			++_g2;
			var prev_output = input.prev_output;
			if(prev_output != null) {
				var removed = prev_output.disconnect(input);
				if(removed == false) {
					prev_output.disconnect_quickbus(input);
				}
			}
		}
	}
	,evaluate: function() {
	}
	,__class__: module_ModuleBase
};
var module_AddModule = function(x,y,removable,img) {
	module_ModuleBase.call(this,"add_module",x,y,2,1,removable,img);
};
module_AddModule.__name__ = true;
module_AddModule.__super__ = module_ModuleBase;
module_AddModule.prototype = $extend(module_ModuleBase.prototype,{
	evaluate: function() {
		this.output_arr[0].value1 = this.input_arr[0].value1 + this.input_arr[1].value1;
		this.output_arr[0].value2 = this.input_arr[0].value2 + this.input_arr[1].value2;
	}
	,__class__: module_AddModule
});
var module_ControlModule = function(x,y,img,idx) {
	module_ModuleBase.call(this,"control_module",x,y,0,1,false,img);
	this.value = 0.5;
	this.idx = idx;
};
module_ControlModule.__name__ = true;
module_ControlModule.__super__ = module_ModuleBase;
module_ControlModule.prototype = $extend(module_ModuleBase.prototype,{
	move: function(x,y) {
		this.y = y;
	}
	,evaluate: function() {
		this.output_arr[0].value1 = this.value;
		this.output_arr[0].value2 = this.value;
	}
	,__class__: module_ControlModule
});
var module_CosModule = function(x,y,removable,img) {
	module_ModuleBase.call(this,"cos_module",x,y,1,1,removable,img);
};
module_CosModule.__name__ = true;
module_CosModule.__super__ = module_ModuleBase;
module_CosModule.prototype = $extend(module_ModuleBase.prototype,{
	evaluate: function() {
		this.output_arr[0].value1 = Math.cos(this.input_arr[0].value1);
		this.output_arr[0].value2 = Math.cos(this.input_arr[0].value2);
	}
	,__class__: module_CosModule
});
var module_DelayModule = function(x,y,removable,img) {
	module_ModuleBase.call(this,"delay_module",x,y,1,1,removable,img);
	this.is_delay = true;
};
module_DelayModule.__name__ = true;
module_DelayModule.__super__ = module_ModuleBase;
module_DelayModule.prototype = $extend(module_ModuleBase.prototype,{
	evaluate: function() {
		this.output_arr[0].value1 = this.input_arr[0].value1 + 1.0e-100;
		this.output_arr[0].value2 = this.input_arr[0].value2 + 1.0e-100;
	}
	,is_constant: function() {
		return false;
	}
	,stream_update: function() {
		return [];
	}
	,delay_update: function() {
		var order = [this];
		var _g = 0;
		var _g1 = this.output_arr;
		while(_g < _g1.length) {
			var output = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = output.next_input_arr;
			while(_g2 < _g11.length) {
				var next_input = _g11[_g2];
				++_g2;
				next_input.stream_updated = true;
				order = order.concat(next_input.module.stream_update());
			}
			var _g21 = 0;
			var _g3 = output.quick_bus_next_input_arr;
			while(_g21 < _g3.length) {
				var next_input1 = _g3[_g21];
				++_g21;
				next_input1.stream_updated = true;
				order = order.concat(next_input1.module.stream_update());
			}
		}
		return order;
	}
	,__class__: module_DelayModule
});
var module_DivideModule = function(x,y,removable,img) {
	module_ModuleBase.call(this,"divide_module",x,y,2,1,removable,img);
};
module_DivideModule.__name__ = true;
module_DivideModule.__super__ = module_ModuleBase;
module_DivideModule.prototype = $extend(module_ModuleBase.prototype,{
	evaluate: function() {
		this.output_arr[0].value1 = this.input_arr[0].value1 / this.input_arr[1].value1;
		this.output_arr[0].value2 = this.input_arr[0].value2 / this.input_arr[1].value2;
	}
	,__class__: module_DivideModule
});
var module_InputModule = function(x,y,img) {
	module_ModuleBase.call(this,"input_module",x,y,0,1,false,img);
	this.value1 = 0.0;
	this.value2 = 0.0;
};
module_InputModule.__name__ = true;
module_InputModule.__super__ = module_ModuleBase;
module_InputModule.prototype = $extend(module_ModuleBase.prototype,{
	move: function(x,y) {
		this.y = y;
	}
	,evaluate: function() {
		this.output_arr[0].value1 = this.value1;
		this.output_arr[0].value2 = this.value2;
	}
	,is_constant: function() {
		return false;
	}
	,__class__: module_InputModule
});
var module_MaxModule = function(x,y,removable,img) {
	module_ModuleBase.call(this,"max_module",x,y,2,1,removable,img);
};
module_MaxModule.__name__ = true;
module_MaxModule.__super__ = module_ModuleBase;
module_MaxModule.prototype = $extend(module_ModuleBase.prototype,{
	evaluate: function() {
		this.output_arr[0].value1 = this.input_arr[0].value1 > this.input_arr[1].value1 ? this.input_arr[0].value1 : this.input_arr[1].value1;
		this.output_arr[0].value2 = this.input_arr[0].value2 > this.input_arr[1].value2 ? this.input_arr[0].value2 : this.input_arr[1].value2;
	}
	,__class__: module_MaxModule
});
var module_MinModule = function(x,y,removable,img) {
	module_ModuleBase.call(this,"min_module",x,y,2,1,removable,img);
};
module_MinModule.__name__ = true;
module_MinModule.__super__ = module_ModuleBase;
module_MinModule.prototype = $extend(module_ModuleBase.prototype,{
	evaluate: function() {
		this.output_arr[0].value1 = this.input_arr[0].value1 < this.input_arr[1].value1 ? this.input_arr[0].value1 : this.input_arr[1].value1;
		this.output_arr[0].value2 = this.input_arr[0].value2 < this.input_arr[1].value2 ? this.input_arr[0].value2 : this.input_arr[1].value2;
	}
	,__class__: module_MinModule
});
var module_MultiplyModule = function(x,y,removable,img) {
	module_ModuleBase.call(this,"multiply_module",x,y,2,1,removable,img);
};
module_MultiplyModule.__name__ = true;
module_MultiplyModule.__super__ = module_ModuleBase;
module_MultiplyModule.prototype = $extend(module_ModuleBase.prototype,{
	evaluate: function() {
		this.output_arr[0].value1 = this.input_arr[0].value1 * this.input_arr[1].value1;
		this.output_arr[0].value2 = this.input_arr[0].value2 * this.input_arr[1].value2;
	}
	,__class__: module_MultiplyModule
});
var module_OutputModule = function(x,y,img) {
	module_ModuleBase.call(this,"output_module",x,y,1,0,false,img);
	this.value1 = 0.0;
	this.value2 = 0.0;
};
module_OutputModule.__name__ = true;
module_OutputModule.__super__ = module_ModuleBase;
module_OutputModule.prototype = $extend(module_ModuleBase.prototype,{
	move: function(x,y) {
		this.y = y;
	}
	,evaluate: function() {
		this.value1 = this.input_arr[0].value1;
		this.value2 = this.input_arr[0].value2;
	}
	,__class__: module_OutputModule
});
var module_SampleRateModule = function(x,y,img) {
	module_ModuleBase.call(this,"samplerate_module",x,y,0,1,this.removable,img);
};
module_SampleRateModule.__name__ = true;
module_SampleRateModule.__super__ = module_ModuleBase;
module_SampleRateModule.prototype = $extend(module_ModuleBase.prototype,{
	move: function(x,y) {
		this.y = y;
	}
	,__class__: module_SampleRateModule
});
var module_SinModule = function(x,y,removable,img) {
	module_ModuleBase.call(this,"sin_module",x,y,1,1,removable,img);
};
module_SinModule.__name__ = true;
module_SinModule.__super__ = module_ModuleBase;
module_SinModule.prototype = $extend(module_ModuleBase.prototype,{
	evaluate: function() {
		this.output_arr[0].value1 = Math.sin(this.input_arr[0].value1);
		this.output_arr[0].value2 = Math.sin(this.input_arr[0].value2);
	}
	,__class__: module_SinModule
});
var module_SqrtModule = function(x,y,removable,img) {
	module_ModuleBase.call(this,"sqrt_module",x,y,1,1,removable,img);
};
module_SqrtModule.__name__ = true;
module_SqrtModule.__super__ = module_ModuleBase;
module_SqrtModule.prototype = $extend(module_ModuleBase.prototype,{
	evaluate: function() {
		this.output_arr[0].value1 = Math.sqrt(this.input_arr[0].value1);
		this.output_arr[0].value2 = Math.sqrt(this.input_arr[0].value2);
	}
	,__class__: module_SqrtModule
});
var module_SubtractModule = function(x,y,removable,img) {
	module_ModuleBase.call(this,"subtract_module",x,y,2,1,removable,img);
};
module_SubtractModule.__name__ = true;
module_SubtractModule.__super__ = module_ModuleBase;
module_SubtractModule.prototype = $extend(module_ModuleBase.prototype,{
	evaluate: function() {
		this.output_arr[0].value1 = this.input_arr[0].value1 - this.input_arr[1].value1;
		this.output_arr[0].value2 = this.input_arr[0].value2 - this.input_arr[1].value2;
	}
	,__class__: module_SubtractModule
});
var module_TanModule = function(x,y,removable,img) {
	module_ModuleBase.call(this,"tan_module",x,y,1,1,removable,img);
};
module_TanModule.__name__ = true;
module_TanModule.__super__ = module_ModuleBase;
module_TanModule.prototype = $extend(module_ModuleBase.prototype,{
	evaluate: function() {
		this.output_arr[0].value1 = Math.tan(this.input_arr[0].value1);
		this.output_arr[0].value2 = Math.tan(this.input_arr[0].value2);
	}
	,__class__: module_TanModule
});
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
Main._display_prompt = false;
Main._moved = false;
Main._edit = false;
Main._midi_learn1 = -1;
Main._midi_learn2 = -1;
Main._midi_learn3 = -1;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
